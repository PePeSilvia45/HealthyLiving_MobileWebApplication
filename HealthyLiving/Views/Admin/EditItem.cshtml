@model HealthyLiving.Models.FoodItem

@{
    ViewBag.Title = "EditItem";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="edit-fooditem-container">

        <div class="edit-foodgroup-heading">
            <h4>FoodItem</h4>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.FoodItemId)


        <div class="edit-fooditem-name">
            <div class="edit-label">
                @Html.LabelFor(model => model.FoodItemName, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="edit-input">
                @Html.EditorFor(model => model.FoodItemName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FoodItemName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="edit-fooditem-information">
            <div class="edit-label">
                @Html.LabelFor(model => model.FoodItemInformation, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="edit-input">
                @Html.EditorFor(model => model.FoodItemInformation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FoodItemInformation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="edit-fooditem-calorie">
            <div class="edit-label">
                @Html.LabelFor(model => model.CalorieCount, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="edit-input">
                @Html.EditorFor(model => model.CalorieCount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CalorieCount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="edit-fooditem-url">
            <div class="edit-label">
                @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="edit-input">
                @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="edit-fooditem-group">
            <div class="edit-label">
                @Html.LabelFor(model => model.FoodGroupId, "FoodGroupId", htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="edit-input">
                @Html.DropDownList("FoodGroupId", (IEnumerable<SelectListItem>)ViewBag.FoodGroupId, "select Food Group")
                @Html.ValidationMessageFor(model => model.FoodGroupId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="edititem-submit-btn">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>

        <div class="edititem-backtogroup">
            @Html.ActionLink("Back to List", "ViewItems", new { id = Model.FoodGroupId })
        </div>

    </div>
}


